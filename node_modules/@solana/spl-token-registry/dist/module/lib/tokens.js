import devnet from './../tokens/devnet.json';
import mainnetBeta from './../tokens/mainnet-beta.json';
import testnet from './../tokens/testnet.json';
import * as cross from 'cross-fetch';
export var ENV;
(function (ENV) {
    ENV["MainnetBeta"] = "mainnet-beta";
    ENV["Testnet"] = "testnet";
    ENV["Devnet"] = "devnet";
})(ENV || (ENV = {}));
export const TOKENS = {
    [ENV.MainnetBeta]: mainnetBeta,
    [ENV.Testnet]: testnet,
    [ENV.Devnet]: devnet,
};
export class SolanaTokenListResolutionStrategy {
    constructor() {
        this.resolve = async (network) => {
            throw new Error(`Not Implemented Yet. ${network}`);
        };
    }
}
export class StaticTokenListResolutionStrategy {
    constructor() {
        this.resolve = async (network) => {
            return TOKENS[network];
        };
    }
}
const queryJsonFiles = async (network, files) => {
    const responses = await Promise.all(files.map(async (repo) => {
        try {
            const response = await cross.fetch(`${repo}/${network}.json`);
            const json = (await response.json());
            return json;
        }
        catch {
            return [];
        }
    }));
    return responses.reduce((acc, arr) => acc.concat(arr), []);
};
export class GitHubTokenListResolutionStrategy {
    constructor() {
        this.repositories = [
            'https://raw.githubusercontent.com/solana-labs/token-list/main/src/tokens',
            'https://raw.githubusercontent.com/project-serum/serum-ts/master/packages/tokens/src',
        ];
        this.resolve = async (network) => {
            return queryJsonFiles(network, this.repositories);
        };
    }
}
export class CDNTokenListResolutionStrategy {
    constructor() {
        this.repositories = [
            'https://cdn.jsdelivr.net/gh/solana-labs/token-list@main/src/tokens',
            'https://cdn.jsdelivr.net/gh/project-serum/serum-ts@master/packages/tokens/src',
        ];
        this.resolve = async (network) => {
            return queryJsonFiles(network, this.repositories);
        };
    }
}
export var Strategy;
(function (Strategy) {
    Strategy["GitHub"] = "GitHub";
    Strategy["Static"] = "Static";
    Strategy["Solana"] = "Solana";
    Strategy["CDN"] = "CDN";
})(Strategy || (Strategy = {}));
export class TokenListProvider {
    constructor() {
        this.resolve = async (network, strategy = Strategy.CDN) => {
            return TokenListProvider.strategies[strategy].resolve(network);
        };
    }
}
TokenListProvider.strategies = {
    [Strategy.GitHub]: new GitHubTokenListResolutionStrategy(),
    [Strategy.Static]: new StaticTokenListResolutionStrategy(),
    [Strategy.Solana]: new SolanaTokenListResolutionStrategy(),
    [Strategy.CDN]: new CDNTokenListResolutionStrategy(),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi90b2tlbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxNQUFNLE1BQU0seUJBQXlCLENBQUM7QUFDN0MsT0FBTyxXQUFXLE1BQU0sK0JBQStCLENBQUM7QUFDeEQsT0FBTyxPQUFPLE1BQU0sMEJBQTBCLENBQUM7QUFFL0MsT0FBTyxLQUFLLEtBQUssTUFBTSxhQUFhLENBQUM7QUFFckMsTUFBTSxDQUFOLElBQVksR0FJWDtBQUpELFdBQVksR0FBRztJQUNiLG1DQUE0QixDQUFBO0lBQzVCLDBCQUFtQixDQUFBO0lBQ25CLHdCQUFpQixDQUFBO0FBQ25CLENBQUMsRUFKVyxHQUFHLEtBQUgsR0FBRyxRQUlkO0FBRUQsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHO0lBQ3BCLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLFdBQVc7SUFDOUIsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsT0FBTztJQUN0QixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxNQUFNO0NBQ3JCLENBQUM7QUFZRixNQUFNLE9BQU8saUNBQWlDO0lBQTlDO1FBQ0UsWUFBTyxHQUFHLEtBQUssRUFBRSxPQUFlLEVBQUUsRUFBRTtZQUNsQyxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQztJQUNKLENBQUM7Q0FBQTtBQUVELE1BQU0sT0FBTyxpQ0FBaUM7SUFBOUM7UUFDRSxZQUFPLEdBQUcsS0FBSyxFQUFFLE9BQWUsRUFBRSxFQUFFO1lBQ2xDLE9BQU8sTUFBTSxDQUFDLE9BQWMsQ0FBaUIsQ0FBQztRQUNoRCxDQUFDLENBQUM7SUFDSixDQUFDO0NBQUE7QUFFRCxNQUFNLGNBQWMsR0FBRyxLQUFLLEVBQUUsT0FBZSxFQUFFLEtBQWUsRUFBRSxFQUFFO0lBQ2hFLE1BQU0sU0FBUyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FDakMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDdkIsSUFBSTtZQUNGLE1BQU0sUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksSUFBSSxPQUFPLE9BQU8sQ0FBQyxDQUFDO1lBQzlELE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQWlCLENBQUM7WUFDckQsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUFDLE1BQU07WUFDTixPQUFPLEVBQUUsQ0FBQztTQUNYO0lBQ0gsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUVGLE9BQU8sU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDN0QsQ0FBQyxDQUFDO0FBRUYsTUFBTSxPQUFPLGlDQUFpQztJQUE5QztRQUNFLGlCQUFZLEdBQUc7WUFDYiwwRUFBMEU7WUFDMUUscUZBQXFGO1NBQ3RGLENBQUM7UUFFRixZQUFPLEdBQUcsS0FBSyxFQUFFLE9BQWUsRUFBRSxFQUFFO1lBQ2xDLE9BQU8sY0FBYyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDcEQsQ0FBQyxDQUFDO0lBQ0osQ0FBQztDQUFBO0FBRUQsTUFBTSxPQUFPLDhCQUE4QjtJQUEzQztRQUNFLGlCQUFZLEdBQUc7WUFDYixvRUFBb0U7WUFDcEUsK0VBQStFO1NBQ2hGLENBQUM7UUFFRixZQUFPLEdBQUcsS0FBSyxFQUFFLE9BQWUsRUFBRSxFQUFFO1lBQ2xDLE9BQU8sY0FBYyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDcEQsQ0FBQyxDQUFDO0lBQ0osQ0FBQztDQUFBO0FBRUQsTUFBTSxDQUFOLElBQVksUUFLWDtBQUxELFdBQVksUUFBUTtJQUNsQiw2QkFBaUIsQ0FBQTtJQUNqQiw2QkFBaUIsQ0FBQTtJQUNqQiw2QkFBaUIsQ0FBQTtJQUNqQix1QkFBVyxDQUFBO0FBQ2IsQ0FBQyxFQUxXLFFBQVEsS0FBUixRQUFRLFFBS25CO0FBRUQsTUFBTSxPQUFPLGlCQUFpQjtJQUE5QjtRQVFFLFlBQU8sR0FBRyxLQUFLLEVBQUUsT0FBZSxFQUFFLFdBQXFCLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUNyRSxPQUFPLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakUsQ0FBQyxDQUFDO0lBQ0osQ0FBQzs7QUFWUSw0QkFBVSxHQUFHO0lBQ2xCLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksaUNBQWlDLEVBQUU7SUFDMUQsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxpQ0FBaUMsRUFBRTtJQUMxRCxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLGlDQUFpQyxFQUFFO0lBQzFELENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksOEJBQThCLEVBQUU7Q0FDckQsQ0FBQyJ9