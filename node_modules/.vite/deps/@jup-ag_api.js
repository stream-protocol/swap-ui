import "./chunk-5537U2Q2.js";

// node_modules/@jup-ag/api/dist/index.mjs
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var BASE_PATH = "http://localhost".replace(/\/+$/, "");
var isBlob = (value) => typeof Blob !== "undefined" && value instanceof Blob;
var BaseAPI = class {
  constructor(configuration = new Configuration()) {
    this.configuration = configuration;
    this.fetchApi = async (url, init) => {
      let fetchParams = { url, init };
      for (const middleware of this.middleware) {
        if (middleware.pre) {
          fetchParams = await middleware.pre(__spreadValues({
            fetch: this.fetchApi
          }, fetchParams)) || fetchParams;
        }
      }
      let response = await (this.configuration.fetchApi || fetch)(fetchParams.url, fetchParams.init);
      for (const middleware of this.middleware) {
        if (middleware.post) {
          response = await middleware.post({
            fetch: this.fetchApi,
            url: fetchParams.url,
            init: fetchParams.init,
            response: response.clone()
          }) || response;
        }
      }
      return response;
    };
    this.middleware = configuration.middleware;
  }
  withMiddleware(...middlewares) {
    const next = this.clone();
    next.middleware = next.middleware.concat(...middlewares);
    return next;
  }
  withPreMiddleware(...preMiddlewares) {
    const middlewares = preMiddlewares.map((pre) => ({ pre }));
    return this.withMiddleware(...middlewares);
  }
  withPostMiddleware(...postMiddlewares) {
    const middlewares = postMiddlewares.map((post) => ({ post }));
    return this.withMiddleware(...middlewares);
  }
  async request(context, initOverrides) {
    const { url, init } = this.createFetchParams(context, initOverrides);
    const response = await this.fetchApi(url, init);
    if (response.status >= 200 && response.status < 300) {
      return response;
    }
    throw response;
  }
  createFetchParams(context, initOverrides) {
    let url = this.configuration.basePath + context.path;
    if (context.query !== void 0 && Object.keys(context.query).length !== 0) {
      url += "?" + this.configuration.queryParamsStringify(context.query);
    }
    const body = typeof FormData !== "undefined" && context.body instanceof FormData || context.body instanceof URLSearchParams || isBlob(context.body) ? context.body : JSON.stringify(context.body);
    const headers = Object.assign({}, this.configuration.headers, context.headers);
    const init = __spreadValues({
      method: context.method,
      headers,
      body,
      credentials: this.configuration.credentials
    }, initOverrides);
    return { url, init };
  }
  clone() {
    const constructor = this.constructor;
    const next = new constructor(this.configuration);
    next.middleware = this.middleware.slice();
    return next;
  }
};
var RequiredError = class extends Error {
  constructor(field, msg) {
    super(msg);
    this.field = field;
    this.name = "RequiredError";
  }
};
var COLLECTION_FORMATS = {
  csv: ",",
  ssv: " ",
  tsv: "	",
  pipes: "|"
};
var Configuration = class {
  constructor(configuration = {}) {
    this.configuration = configuration;
  }
  get basePath() {
    return this.configuration.basePath != null ? this.configuration.basePath : BASE_PATH;
  }
  get fetchApi() {
    return this.configuration.fetchApi;
  }
  get middleware() {
    return this.configuration.middleware || [];
  }
  get queryParamsStringify() {
    return this.configuration.queryParamsStringify || querystring;
  }
  get username() {
    return this.configuration.username;
  }
  get password() {
    return this.configuration.password;
  }
  get apiKey() {
    const apiKey = this.configuration.apiKey;
    if (apiKey) {
      return typeof apiKey === "function" ? apiKey : () => apiKey;
    }
    return void 0;
  }
  get accessToken() {
    const accessToken = this.configuration.accessToken;
    if (accessToken) {
      return typeof accessToken === "function" ? accessToken : async () => accessToken;
    }
    return void 0;
  }
  get headers() {
    return this.configuration.headers;
  }
  get credentials() {
    return this.configuration.credentials;
  }
};
function exists(json, key) {
  const value = json[key];
  return value !== null && value !== void 0;
}
function querystring(params, prefix = "") {
  return Object.keys(params).map((key) => {
    const fullKey = prefix + (prefix.length ? `[${key}]` : key);
    const value = params[key];
    if (value instanceof Array) {
      const multiValue = value.map((singleValue) => encodeURIComponent(String(singleValue))).join(`&${encodeURIComponent(fullKey)}=`);
      return `${encodeURIComponent(fullKey)}=${multiValue}`;
    }
    if (value instanceof Date) {
      return `${encodeURIComponent(fullKey)}=${encodeURIComponent(value.toISOString())}`;
    }
    if (value instanceof Object) {
      return querystring(value, fullKey);
    }
    return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;
  }).filter((part) => part.length > 0).join("&");
}
function mapValues(data, fn) {
  return Object.keys(data).reduce((acc, key) => __spreadProps(__spreadValues({}, acc), { [key]: fn(data[key]) }), {});
}
function canConsumeForm(consumes) {
  for (const consume of consumes) {
    if (consume.contentType === "multipart/form-data") {
      return true;
    }
  }
  return false;
}
var JSONApiResponse = class {
  constructor(raw, transformer = (jsonValue) => jsonValue) {
    this.raw = raw;
    this.transformer = transformer;
  }
  async value() {
    return this.transformer(await this.raw.json());
  }
};
var VoidApiResponse = class {
  constructor(raw) {
    this.raw = raw;
  }
  async value() {
    return void 0;
  }
};
var BlobApiResponse = class {
  constructor(raw) {
    this.raw = raw;
  }
  async value() {
    return await this.raw.blob();
  }
};
var TextApiResponse = class {
  constructor(raw) {
    this.raw = raw;
  }
  async value() {
    return await this.raw.text();
  }
};
function InlineResponseDefaultLpFeeFromJSON(json) {
  return InlineResponseDefaultLpFeeFromJSONTyped(json, false);
}
function InlineResponseDefaultLpFeeFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "amount": !exists(json, "amount") ? void 0 : json["amount"],
    "mint": !exists(json, "mint") ? void 0 : json["mint"],
    "pct": !exists(json, "pct") ? void 0 : json["pct"]
  };
}
function InlineResponseDefaultLpFeeToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "amount": value.amount,
    "mint": value.mint,
    "pct": value.pct
  };
}
function InlineResponseDefaultMarketInfosFromJSON(json) {
  return InlineResponseDefaultMarketInfosFromJSONTyped(json, false);
}
function InlineResponseDefaultMarketInfosFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "id": !exists(json, "id") ? void 0 : json["id"],
    "label": !exists(json, "label") ? void 0 : json["label"],
    "inputMint": !exists(json, "inputMint") ? void 0 : json["inputMint"],
    "outputMint": !exists(json, "outputMint") ? void 0 : json["outputMint"],
    "notEnoughLiquidity": !exists(json, "notEnoughLiquidity") ? void 0 : json["notEnoughLiquidity"],
    "inAmount": !exists(json, "inAmount") ? void 0 : json["inAmount"],
    "outAmount": !exists(json, "outAmount") ? void 0 : json["outAmount"],
    "priceImpactPct": !exists(json, "priceImpactPct") ? void 0 : json["priceImpactPct"],
    "lpFee": !exists(json, "lpFee") ? void 0 : InlineResponseDefaultLpFeeFromJSON(json["lpFee"]),
    "platformFee": !exists(json, "platformFee") ? void 0 : InlineResponseDefaultLpFeeFromJSON(json["platformFee"])
  };
}
function InlineResponseDefaultMarketInfosToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "id": value.id,
    "label": value.label,
    "inputMint": value.inputMint,
    "outputMint": value.outputMint,
    "notEnoughLiquidity": value.notEnoughLiquidity,
    "inAmount": value.inAmount,
    "outAmount": value.outAmount,
    "priceImpactPct": value.priceImpactPct,
    "lpFee": InlineResponseDefaultLpFeeToJSON(value.lpFee),
    "platformFee": InlineResponseDefaultLpFeeToJSON(value.platformFee)
  };
}
function V1SwapRouteFromJSON(json) {
  return V1SwapRouteFromJSONTyped(json, false);
}
function V1SwapRouteFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "inAmount": !exists(json, "inAmount") ? void 0 : json["inAmount"],
    "outAmount": !exists(json, "outAmount") ? void 0 : json["outAmount"],
    "outAmountWithSlippage": !exists(json, "outAmountWithSlippage") ? void 0 : json["outAmountWithSlippage"],
    "priceImpactPct": !exists(json, "priceImpactPct") ? void 0 : json["priceImpactPct"],
    "marketInfos": !exists(json, "marketInfos") ? void 0 : json["marketInfos"].map(InlineResponseDefaultMarketInfosFromJSON)
  };
}
function V1SwapRouteToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "inAmount": value.inAmount,
    "outAmount": value.outAmount,
    "outAmountWithSlippage": value.outAmountWithSlippage,
    "priceImpactPct": value.priceImpactPct,
    "marketInfos": value.marketInfos === void 0 ? void 0 : value.marketInfos.map(InlineResponseDefaultMarketInfosToJSON)
  };
}
function InlineObjectFromJSON(json) {
  return InlineObjectFromJSONTyped(json, false);
}
function InlineObjectFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "route": !exists(json, "route") ? void 0 : V1SwapRouteFromJSON(json["route"]),
    "wrapUnwrapSOL": !exists(json, "wrapUnwrapSOL") ? void 0 : json["wrapUnwrapSOL"],
    "feeAccount": !exists(json, "feeAccount") ? void 0 : json["feeAccount"],
    "tokenLedger": !exists(json, "tokenLedger") ? void 0 : json["tokenLedger"],
    "userPublicKey": !exists(json, "userPublicKey") ? void 0 : json["userPublicKey"]
  };
}
function InlineObjectToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "route": V1SwapRouteToJSON(value.route),
    "wrapUnwrapSOL": value.wrapUnwrapSOL,
    "feeAccount": value.feeAccount,
    "tokenLedger": value.tokenLedger,
    "userPublicKey": value.userPublicKey
  };
}
function InlineResponseDefaultDataFromJSON(json) {
  return InlineResponseDefaultDataFromJSONTyped(json, false);
}
function InlineResponseDefaultDataFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "inAmount": !exists(json, "inAmount") ? void 0 : json["inAmount"],
    "outAmount": !exists(json, "outAmount") ? void 0 : json["outAmount"],
    "outAmountWithSlippage": !exists(json, "outAmountWithSlippage") ? void 0 : json["outAmountWithSlippage"],
    "priceImpactPct": !exists(json, "priceImpactPct") ? void 0 : json["priceImpactPct"],
    "marketInfos": !exists(json, "marketInfos") ? void 0 : json["marketInfos"].map(InlineResponseDefaultMarketInfosFromJSON)
  };
}
function InlineResponseDefaultDataToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "inAmount": value.inAmount,
    "outAmount": value.outAmount,
    "outAmountWithSlippage": value.outAmountWithSlippage,
    "priceImpactPct": value.priceImpactPct,
    "marketInfos": value.marketInfos === void 0 ? void 0 : value.marketInfos.map(InlineResponseDefaultMarketInfosToJSON)
  };
}
function InlineResponseDefaultFromJSON(json) {
  return InlineResponseDefaultFromJSONTyped(json, false);
}
function InlineResponseDefaultFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : json["data"].map(InlineResponseDefaultDataFromJSON),
    "timeTaken": !exists(json, "timeTaken") ? void 0 : json["timeTaken"]
  };
}
function InlineResponseDefaultToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": value.data === void 0 ? void 0 : value.data.map(InlineResponseDefaultDataToJSON),
    "timeTaken": value.timeTaken
  };
}
function InlineResponseDefault1FromJSON(json) {
  return InlineResponseDefault1FromJSONTyped(json, false);
}
function InlineResponseDefault1FromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : json["data"],
    "timeTaken": !exists(json, "timeTaken") ? void 0 : json["timeTaken"]
  };
}
function InlineResponseDefault1ToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": value.data,
    "timeTaken": value.timeTaken
  };
}
function InlineResponseDefault2FromJSON(json) {
  return InlineResponseDefault2FromJSONTyped(json, false);
}
function InlineResponseDefault2FromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "setupTransaction": !exists(json, "setupTransaction") ? void 0 : json["setupTransaction"],
    "swapTransaction": !exists(json, "swapTransaction") ? void 0 : json["swapTransaction"],
    "cleanupTransaction": !exists(json, "cleanupTransaction") ? void 0 : json["cleanupTransaction"]
  };
}
function InlineResponseDefault2ToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "setupTransaction": value.setupTransaction,
    "swapTransaction": value.swapTransaction,
    "cleanupTransaction": value.cleanupTransaction
  };
}
function InlineResponseDefault3FromJSON(json) {
  return InlineResponseDefault3FromJSONTyped(json, false);
}
function InlineResponseDefault3FromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "mintKeys": !exists(json, "mintKeys") ? void 0 : json["mintKeys"],
    "indexedRouteMap": !exists(json, "indexedRouteMap") ? void 0 : json["indexedRouteMap"]
  };
}
function InlineResponseDefault3ToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "mintKeys": value.mintKeys,
    "indexedRouteMap": value.indexedRouteMap
  };
}
var DefaultApi = class extends BaseAPI {
  async v1IndexedRouteMapGetRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.onlyDirectRoutes !== void 0) {
      queryParameters["onlyDirectRoutes"] = requestParameters.onlyDirectRoutes;
    }
    const headerParameters = {};
    const response = await this.request({
      path: `/v1/indexed-route-map`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => InlineResponseDefault3FromJSON(jsonValue));
  }
  async v1IndexedRouteMapGet(requestParameters = {}, initOverrides) {
    const response = await this.v1IndexedRouteMapGetRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async v1PriceGetRaw(requestParameters, initOverrides) {
    if (requestParameters.inputMint === null || requestParameters.inputMint === void 0) {
      throw new RequiredError("inputMint", "Required parameter requestParameters.inputMint was null or undefined when calling v1PriceGet.");
    }
    if (requestParameters.outputMint === null || requestParameters.outputMint === void 0) {
      throw new RequiredError("outputMint", "Required parameter requestParameters.outputMint was null or undefined when calling v1PriceGet.");
    }
    const queryParameters = {};
    if (requestParameters.inputMint !== void 0) {
      queryParameters["inputMint"] = requestParameters.inputMint;
    }
    if (requestParameters.outputMint !== void 0) {
      queryParameters["outputMint"] = requestParameters.outputMint;
    }
    if (requestParameters.amount !== void 0) {
      queryParameters["amount"] = requestParameters.amount;
    }
    const headerParameters = {};
    const response = await this.request({
      path: `/v1/price`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => InlineResponseDefault1FromJSON(jsonValue));
  }
  async v1PriceGet(requestParameters, initOverrides) {
    const response = await this.v1PriceGetRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async v1QuoteGetRaw(requestParameters, initOverrides) {
    if (requestParameters.inputMint === null || requestParameters.inputMint === void 0) {
      throw new RequiredError("inputMint", "Required parameter requestParameters.inputMint was null or undefined when calling v1QuoteGet.");
    }
    if (requestParameters.outputMint === null || requestParameters.outputMint === void 0) {
      throw new RequiredError("outputMint", "Required parameter requestParameters.outputMint was null or undefined when calling v1QuoteGet.");
    }
    if (requestParameters.amount === null || requestParameters.amount === void 0) {
      throw new RequiredError("amount", "Required parameter requestParameters.amount was null or undefined when calling v1QuoteGet.");
    }
    const queryParameters = {};
    if (requestParameters.inputMint !== void 0) {
      queryParameters["inputMint"] = requestParameters.inputMint;
    }
    if (requestParameters.outputMint !== void 0) {
      queryParameters["outputMint"] = requestParameters.outputMint;
    }
    if (requestParameters.amount !== void 0) {
      queryParameters["amount"] = requestParameters.amount;
    }
    if (requestParameters.slippage !== void 0) {
      queryParameters["slippage"] = requestParameters.slippage;
    }
    if (requestParameters.feeBps !== void 0) {
      queryParameters["feeBps"] = requestParameters.feeBps;
    }
    if (requestParameters.onlyDirectRoutes !== void 0) {
      queryParameters["onlyDirectRoutes"] = requestParameters.onlyDirectRoutes;
    }
    const headerParameters = {};
    const response = await this.request({
      path: `/v1/quote`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => InlineResponseDefaultFromJSON(jsonValue));
  }
  async v1QuoteGet(requestParameters, initOverrides) {
    const response = await this.v1QuoteGetRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async v1RouteMapGetRaw(initOverrides) {
    const queryParameters = {};
    const headerParameters = {};
    const response = await this.request({
      path: `/v1/route-map`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new VoidApiResponse(response);
  }
  async v1RouteMapGet(initOverrides) {
    await this.v1RouteMapGetRaw(initOverrides);
  }
  async v1SwapPostRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    const response = await this.request({
      path: `/v1/swap`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: InlineObjectToJSON(requestParameters.body)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => InlineResponseDefault2FromJSON(jsonValue));
  }
  async v1SwapPost(requestParameters = {}, initOverrides) {
    const response = await this.v1SwapPostRaw(requestParameters, initOverrides);
    return await response.value();
  }
};
export {
  BASE_PATH,
  BaseAPI,
  BlobApiResponse,
  COLLECTION_FORMATS,
  Configuration,
  DefaultApi,
  InlineObjectFromJSON,
  InlineObjectFromJSONTyped,
  InlineObjectToJSON,
  InlineResponseDefault1FromJSON,
  InlineResponseDefault1FromJSONTyped,
  InlineResponseDefault1ToJSON,
  InlineResponseDefault2FromJSON,
  InlineResponseDefault2FromJSONTyped,
  InlineResponseDefault2ToJSON,
  InlineResponseDefault3FromJSON,
  InlineResponseDefault3FromJSONTyped,
  InlineResponseDefault3ToJSON,
  InlineResponseDefaultDataFromJSON,
  InlineResponseDefaultDataFromJSONTyped,
  InlineResponseDefaultDataToJSON,
  InlineResponseDefaultFromJSON,
  InlineResponseDefaultFromJSONTyped,
  InlineResponseDefaultLpFeeFromJSON,
  InlineResponseDefaultLpFeeFromJSONTyped,
  InlineResponseDefaultLpFeeToJSON,
  InlineResponseDefaultMarketInfosFromJSON,
  InlineResponseDefaultMarketInfosFromJSONTyped,
  InlineResponseDefaultMarketInfosToJSON,
  InlineResponseDefaultToJSON,
  JSONApiResponse,
  RequiredError,
  TextApiResponse,
  V1SwapRouteFromJSON,
  V1SwapRouteFromJSONTyped,
  V1SwapRouteToJSON,
  VoidApiResponse,
  canConsumeForm,
  exists,
  mapValues,
  querystring
};
//# sourceMappingURL=@jup-ag_api.js.map
